package com.example.ingestion.config;

import com.example.ingestion.service.ContinuousBatchService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Î∞∞Ïπò ÏûêÎèô ÏãúÏûë ÏÑ§Ï†ï
 * ÏöîÍµ¨ÏÇ¨Ìï≠: "API Token ÎßåÎ£å Ï†ÑÍπåÏßÄ Î¨¥Ìïú Î∞òÎ≥µ, ÏÇ¨Ïö©Ïûê Í∞úÏûÖ ÏóÜÏù¥ ÏßÄÏÜç Ïã§Ìñâ"
 */
@Configuration
@ConditionalOnProperty(
        value = "app.batch.continuous.enabled",
        havingValue = "true",
        matchIfMissing = false
)
public class BatchAutoStartConfiguration {

    private static final Logger logger = LoggerFactory.getLogger(BatchAutoStartConfiguration.class);

    @Value("${BATCH_AUTO_START:false}")
    private boolean batchAutoStart;

    /**
     * Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë Ïãú Î¨¥Ìïú Î∞òÎ≥µ Î∞∞ÏπòÎ•º ÏûêÎèôÏúºÎ°ú ÏãúÏûëÌï©ÎãàÎã§
     */
    @Bean
    @ConditionalOnProperty(value = "BATCH_AUTO_START", havingValue = "true")
    public ApplicationRunner batchAutoStarter(ContinuousBatchService continuousBatchService) {
        return args -> {
            logger.info("üöÄ Auto-starting continuous batch processing as configured");
            logger.info("üìã Configuration:");
            logger.info("   - BATCH_AUTO_START: {}", batchAutoStart);
            logger.info("   - Infinite loop processing: ENABLED");
            logger.info("   - Auto database initialization: ENABLED");
            logger.info("   - Target: ÎåÄÌïúÎØºÍµ≠ Ï†ÑÍµ≠ Ïãú/Íµ∞/Íµ¨/Îèô Îã®ÏúÑ Ïû•ÏÜå ÏàòÏßë");

            try {
                // Start the continuous batch processing
                continuousBatchService.startContinuousProcessing();
                logger.info("‚úÖ Continuous batch processing started successfully");
                logger.info("üîÑ Batch will continue running until API tokens expire or manual stop");

            } catch (Exception e) {
                logger.error("‚ùå Failed to start continuous batch processing", e);
                throw new RuntimeException("Batch auto-start failed", e);
            }
        };
    }

    /**
     * Ïª®ÌÖåÏù¥ÎÑà Ï¢ÖÎ£å Ïãú Î∞∞Ïπò Ï†ïÎ¶¨
     */
    @Bean
    @ConditionalOnProperty(value = "BATCH_AUTO_START", havingValue = "true")
    public ApplicationRunner batchShutdownHook(ContinuousBatchService continuousBatchService) {
        return args -> {
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                logger.info("üõë Application shutdown detected, stopping continuous batch processing");
                try {
                    continuousBatchService.stopContinuousProcessing();
                    logger.info("‚úÖ Continuous batch processing stopped gracefully");
                } catch (Exception e) {
                    logger.warn("‚ö†Ô∏è Error during batch shutdown: {}", e.getMessage());
                }
            }));
        };
    }
}